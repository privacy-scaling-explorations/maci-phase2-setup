/** Declaration file generated by dts-gen */
declare module '@p0tion/actions';
export const CeremonyState: {
    CLOSED: string;
    FINALIZED: string;
    OPENED: string;
    PAUSED: string;
    SCHEDULED: string;
};

export const CeremonyTimeoutType: {
    DYNAMIC: string;
    FIXED: string;
};

export const CeremonyType: {
    PHASE1: string;
    PHASE2: string;
};

export const ParticipantContributionStep: {
    COMPLETED: string;
    COMPUTING: string;
    DOWNLOADING: string;
    UPLOADING: string;
    VERIFYING: string;
};

export const ParticipantStatus: {
    CONTRIBUTED: string;
    CONTRIBUTING: string;
    CREATED: string;
    DONE: string;
    EXHUMED: string;
    FINALIZED: string;
    FINALIZING: string;
    READY: string;
    TIMEDOUT: string;
    WAITING: string;
};

export const RequestType: {
    GET: string;
    PUT: string;
};

export const TestingEnvironment: {
    DEVELOPMENT: string;
    PRODUCTION: string;
};

export const TimeoutType: {
    BLOCKING_CLOUD_FUNCTION: string;
    BLOCKING_CONTRIBUTION: string;
};

export const commonTerms: {
    cloudFunctionsNames: {
        checkAndPrepareCoordinatorForFinalization: string;
        checkIfObjectExist: string;
        checkParticipantForCeremony: string;
        completeMultiPartUpload: string;
        createBucket: string;
        downloadCircuitArtifacts: string;
        finalizeCeremony: string;
        finalizeCircuit: string;
        generateGetObjectPreSignedUrl: string;
        generatePreSignedUrlsParts: string;
        permanentlyStoreCurrentContributionTimeAndHash: string;
        progressToNextCircuitForContribution: string;
        progressToNextContributionStep: string;
        resumeContributionAfterTimeoutExpiration: string;
        setupCeremony: string;
        startMultiPartUpload: string;
        temporaryStoreCurrentContributionMultiPartUploadId: string;
        temporaryStoreCurrentContributionUploadedChunkData: string;
        verifyContribution: string;
    };
    collections: {
        ceremonies: {
            fields: {
                coordinatorId: string;
                description: string;
                endDate: string;
                lastUpdated: string;
                penalty: string;
                prefix: string;
                startDate: string;
                state: string;
                timeoutType: string;
                title: string;
                type: string;
            };
            name: string;
        };
        circuits: {
            fields: {
                avgTimings: string;
                compiler: string;
                description: string;
                files: string;
                lastUpdated: string;
                metadata: string;
                name: string;
                prefix: string;
                sequencePosition: string;
                template: string;
                timeoutMaxContributionWaitingTime: string;
                waitingQueue: string;
                zKeySizeInBytes: string;
            };
            name: string;
        };
        contributions: {
            fields: {
                contributionComputationTime: string;
                files: string;
                lastUpdated: string;
                participantId: string;
                valid: string;
                verificationComputationTime: string;
                zkeyIndex: string;
            };
            name: string;
        };
        participants: {
            fields: {
                contributionProgress: string;
                contributionStartedAt: string;
                contributionStep: string;
                contributions: string;
                lastUpdated: string;
                status: string;
                verificationStartedAt: string;
            };
            name: string;
        };
        timeouts: {
            fields: {
                endDate: string;
                startDate: string;
                type: string;
            };
            name: string;
        };
        users: {
            fields: {
                creationTime: string;
                displayName: string;
                email: string;
                emailVerified: string;
                lastSignInTime: string;
                lastUpdated: string;
                name: string;
                photoURL: string;
            };
            name: string;
        };
    };
    foldersAndPathsTerms: {
        attestation: string;
        contribute: string;
        finalize: string;
        metadata: string;
        output: string;
        pot: string;
        setup: string;
        transcripts: string;
        verifiers: string;
        vkeys: string;
        wasm: string;
        zkeys: string;
    };
};

export const finalContributionIndex: string;

export const genesisZkeyIndex: string;

export const numExpIterations: number;

export const potFileDownloadMainUrl: string;

export const potFilenameTemplate: string;

export const solidityVersion: string;

export const verificationKeyAcronym: string;

export const verifierSmartContractAcronym: string;

export function autoGenerateEntropy(): void;

export function blake512FromPath(path: any): any;

export function checkAndPrepareCoordinatorForFinalization(functions$1: any, ceremonyId: any): any;

export function checkIfObjectExist(functions$1: any, bucketName: any, objectKey: any): any;

export function checkParticipantForCeremony(functions$1: any, ceremonyId: any): any;

export function compareCeremonyArtifacts(firebaseFunctions: any, localPath1: any, localPath2: any, storagePath1: any, storagePath2: any, bucketName1: any, bucketName2: any, cleanup: any): any;

export function compareHashes(path1: any, path2: any): any;

export function compileContract(contractPath: any): any;

export function completeMultiPartUpload(functions$1: any, bucketName: any, objectKey: any, uploadId: any, parts: any, ceremonyId: any): any;

export function computeSHA256ToHex(value: any): void;

export function computeSmallestPowersOfTauForCircuit(constraints: any, outputs: any): any;

export function convertBytesOrKbToGb(bytesOrKb: any, isBytes: any): void;

export function createCustomLoggerForFile(filename: any, level: any): void;

export function createS3Bucket(functions$1: any, bucketName: any): void;

export function downloadAllCeremonyArtifacts(functions: any, firestore$1: any, ceremonyPrefix: any, outputDirectory: any): any;

export function downloadCeremonyArtifact(cloudFunctions: any, bucketName: any, storagePath: any, localPath: any): void;

export function exportVerifierAndVKey(finalZkeyPath: any, verifierLocalPath: any, vKeyLocalPath: any, templatePath: any): void;

export function exportVerifierContract(finalZkeyPath: any, templatePath: any): any;

export function exportVkey(finalZkeyPath: any): any;

export function extractPoTFromFilename(potCompleteFilename: any): void;

export function extractPrefix(str: any): void;

export function extractR1CSInfoValueForGivenKey(fullFilePath: any, keyRgx: any): any;

export function finalizeCeremony(functions$1: any, ceremonyId: any): void;

export function finalizeCircuit(functions$1: any, ceremonyId: any, circuitId: any, bucketName: any, beacon: any): void;

export function formatSolidityCalldata(circuitInput: any, _proof: any): any;

export function formatZkeyIndex(progress: any): any;

export function fromQueryToFirebaseDocumentInfo(queryDocSnap: any): void;

export function generateGROTH16Proof(circuitInput: any, zkeyFilePath: any, wasmFilePath: any, logger: any): any;

export function generateGetObjectPreSignedUrl(functions$1: any, bucketName: any, objectKey: any): any;

export function generatePreSignedUrlsParts(functions$1: any, bucketName: any, objectKey: any, uploadId: any, numberOfParts: any, ceremonyId: any): any;

export function generateValidContributionsAttestation(firestoreDatabase: any, circuits: any, ceremonyId: any, participantId: any, participantContributions: any, contributorIdentifier: any, ceremonyName: any, isFinalizing: any): any;

export function generateZkeyFromScratch(isFinalizing: any, r1csLocalPath: any, potLocalPath: any, zkeyLocalPath: any, logger: any, finalContributionZKeyLocalPath: any, coordinatorIdentifier: any, beacon: any): void;

export function getAllCollectionDocs(firestoreDatabase: any, collection: any): void;

export function getBucketName(ceremonyPrefix: any, ceremonyPostfix: any): void;

export function getCeremonyCircuits(firestoreDatabase: any, ceremonyId: any): void;

export function getCircuitBySequencePosition(circuits: any, sequencePosition: any): any;

export function getCircuitContributionsFromContributor(firestoreDatabase: any, ceremonyId: any, circuitId: any, participantId: any): any;

export function getCircuitsCollectionPath(ceremonyId: any): void;

export function getClosedCeremonies(firestoreDatabase: any): any;

export function getContributionsCollectionPath(ceremonyId: any, circuitId: any): void;

export function getContributionsValidityForContributor(firestoreDatabase: any, circuits: any, ceremonyId: any, participantId: any, isFinalizing: any): any;

export function getCurrentActiveParticipantTimeout(firestoreDatabase: any, ceremonyId: any, participantId: any): any;

export function getCurrentFirebaseAuthUser(firebaseApp: any): any;

export function getDocumentById(firestoreDatabase: any, collection: any, documentId: any): any;

export function getOpenedCeremonies(firestoreDatabase: any): any;

export function getParticipantsCollectionPath(ceremonyId: any): void;

export function getPotStorageFilePath(completePotFilename: any): void;

export function getPublicAttestationPreambleForContributor(contributorIdentifier: any, ceremonyName: any, isFinalizing: any): void;

export function getR1CSInfo(localR1CSFilePath: any): any;

export function getR1csStorageFilePath(circuitPrefix: any, completeR1csFilename: any): void;

export function getTimeoutsCollectionPath(ceremonyId: any, participantId: any): void;

export function getTranscriptStorageFilePath(circuitPrefix: any, completeTranscriptFilename: any): void;

export function getVerificationKeyStorageFilePath(circuitPrefix: any, completeVerificationKeyFilename: any): void;

export function getVerifierContractStorageFilePath(circuitPrefix: any, completeVerifierContractFilename: any): void;

export function getWasmStorageFilePath(circuitPrefix: any, completeWasmFilename: any): void;

export function getZkeyStorageFilePath(circuitPrefix: any, completeZkeyFilename: any): void;

export function githubReputation(userLogin: any, minimumAmountOfFollowing: any, minimumAmountOfFollowers: any, minimumAmountOfPublicRepos: any): any;

export function initializeFirebaseCoreServices(apiKey: any, authDomain: any, projectId: any, messagingSenderId: any, appId: any): any;

export function isCoordinator(user: any): any;

export function multiPartUpload(cloudFunctions: any, bucketName: any, objectKey: any, localFilePath: any, configStreamChunkSize: any, ceremonyId: any, temporaryDataToResumeMultiPartUpload: any): void;

export function p256(proofPart: any): any;

export function permanentlyStoreCurrentContributionTimeAndHash(functions$1: any, ceremonyId: any, contributionComputationTime: any, contributionHash: any): void;

export function progressToNextCircuitForContribution(functions$1: any, ceremonyId: any): void;

export function progressToNextContributionStep(functions$1: any, ceremonyId: any): void;

export function queryCollection(firestoreDatabase: any, collection: any, queryConstraints: any): any;

export function resumeContributionAfterTimeoutExpiration(functions$1: any, ceremonyId: any): void;

export function setupCeremony(functions$1: any, ceremonyInputData: any, ceremonyPrefix: any, circuits: any): any;

export function signInToFirebaseWithCredentials(firebaseApp: any, credentials: any): void;

export function temporaryStoreCurrentContributionMultiPartUploadId(functions$1: any, ceremonyId: any, uploadId: any): void;

export function temporaryStoreCurrentContributionUploadedChunkData(functions$1: any, ceremonyId: any, chunk: any): void;

export function toHex(buffer: any): void;

export function verifyCeremony(functions: any, firestore$1: any, ceremonyPrefix: any, outputDirectory: any, circuitInputsPath: any, verifierTemplatePath: any, signer: any, logger: any): void;

export function verifyContribution(functions$1: any, ceremonyId: any, circuit: any, bucketName: any, contributorOrCoordinatorIdentifier: any, verifyContributionCloudFunctionEndpoint: any): any;

export function verifyGROTH16Proof(verificationKeyPath: any, publicSignals: any, proof: any): any;

export function verifyGROTH16ProofOnChain(contract: any, proof: any): any;

export function verifyZKey(r1csLocalFilePath: any, zkeyLocalPath: any, potLocalFilePath: any, logger: any): any;

